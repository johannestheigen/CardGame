package no.ntnu.idatx2003.oblig4.cardgame.card;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

/**
 * The DeckOfCards class represents a deck of playing Cards. The deck is a standard deck of 52
 * playing Cards, with 4 suits and 13 faces. The class is implemented using the List and ArrayList
 * libraries.
 *
 * @author Johannes Nupen Theigen
 * @version 0.0.2
 * @since 03.05.2025
 */
public class DeckOfCards {

  private final List<PlayingCard> cards;
  private final char[] suits = {'S', 'H', 'D', 'C'};
  private final Random random;

  /**
   * Initializes a new DeckOfCards object with a standard deck of
   * 52 playing Cards (4 suits and 13 faces).
   * The Cards are stored in an ArrayList and generated in
   * the constructor using the generateDeck method.
   */
  public DeckOfCards() {
    cards = new ArrayList<>();
    generateDeck(); // Generates a standard deck of 52 playing Cards and adds them to the deck
    random = new Random();
  }

  /**
   * Generates a standard deck of 52 playing Cards. The deck is
   * generated by iterating over the suits
   * and faces of the Cards and adding them to the deck.
   *
   * @return true if the deck was successfully generated, false otherwise
   */
  public boolean generateDeck() {
    boolean deckGenerated = false;

    if (!cards.isEmpty()) {
      return deckGenerated;
    }
    for (char suit : suits) {
      for (int face = 1; face <= 13; face++) {
        cards.add(new PlayingCard(suit, face));
      }
    }
    deckGenerated = true;
    return deckGenerated;
  }

  /**
   * Shuffles the deck of playing Cards.
   *
   * @return true if the deck was successfully shuffled, false otherwise
   */
  public boolean shuffle() {
    if (cards == null || cards.isEmpty()) {
      return false;
    }
    Collections.shuffle(cards);
    return true;
  }

  /**
   * Draws a random card from the deck. The card is removed from the deck
   * and returned to the caller.

   * @return a random playing Card from the deck, or null if the deck is empty
   */
  public PlayingCard drawCard() {
    if (cards.isEmpty()) {
      return null;
    }
    return cards.remove(random.nextInt(cards.size()));
  }

  /**
   * Returns the number of playing Cards in the deck.

   * @return the number of playing Cards in the deck
   */
  public int getCardCount() {
    return cards.size();
  }
}