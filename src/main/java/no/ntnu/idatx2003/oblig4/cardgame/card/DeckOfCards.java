package no.ntnu.idatx2003.oblig4.cardgame.card;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * The DeckOfCards class represents a deck of playing cards. The deck is a standard deck of 52
 * playing cards, with 4 suits and 13 faces. The class is implemented using the List and ArrayList
 * libraries.
 *
 * @author Johannes Nupen Theigen
 * @version 0.0.2
 * @since 03.05.2025
 */
public class DeckOfCards {

  private final List<PlayingCard> cards;
  private final char[] suits = {'S', 'H', 'D', 'C'};
  private final Random random;

  /**
   * Initializes a new DeckOfCards object with a standard deck of
   * 52 playing cards (4 suits and 13 faces).
   * The cards are stored in an ArrayList and generated in
   * the constructor using the generateDeck method.
   */
  public DeckOfCards() {
    cards = new ArrayList<>();
    generateDeck(); // Generates a standard deck of 52 playing cards and adds them to the deck
    random = new Random();
  }

  /**
   * Generates a standard deck of 52 playing cards. The deck is
   * generated by iterating over the suits
   * and faces of the cards and adding them to the deck.
   *
   * @return true if the deck was successfully generated, false otherwise
   */
  public boolean generateDeck() {
    boolean deckGenerated = false;

    if (!cards.isEmpty()) {
      return deckGenerated;
    }
    for (char suit : suits) {
      for (int face = 1; face <= 13; face++) {
        cards.add(new PlayingCard(suit, face));
      }
    }
    deckGenerated = true;
    return deckGenerated;
  }

  /**
   * Deals a hand of playing cards from the deck. The number of cards
   * to deal is specified by the parameter i. If the deck is empty or
   * the number of cards to deal is less than or equal to 0, an empty
   * list is returned. If the number of cards to deal is greater than
   * the number of cards in the deck, the method deals the remaining
   * cards in the deck.
   */
  public List<PlayingCard> dealHand(int i) {
    if (i <= 0) {
      return new ArrayList<>();
    }
    if (i > cards.size()) {
      i = cards.size();
    }
    List<PlayingCard> hand = new ArrayList<>();
    while (hand.size() < i && !cards.isEmpty()) {
      int index = random.nextInt(cards.size());
      PlayingCard cardToDeal = cards.get(index);
      hand.add(cardToDeal);
      cards.remove(index);
    }
    return hand;
  }
}