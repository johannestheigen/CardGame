package model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

/**
 * The model.DeckOfCards class represents a deck of playing Cards. The deck is a standard deck of 52
 * playing Cards, with 4 suits and 13 faces. The class is implemented using the List and ArrayList
 * libraries.
 *
 * @author Johannes Nupen Theigen
 * @version 0.0.6
 * @since 03.08.2025
 */
public class DeckOfCards {

  private List<PlayingCard> cards;
  private final char[] suits = {'S', 'H', 'D', 'C'};
  private final Random random;

  /**
   * Initializes a new model.DeckOfCards object with a standard deck of
   * 52 playing Cards (4 suits and 13 faces).
   * The Cards are stored in an ArrayList and generated in
   * using the generateDeck method.
   */
  public DeckOfCards() {
    cards = new ArrayList<>();
    generateDeck(); // Generates a standard deck of 52 playing Cards and adds them to the deck
    random = new Random();
  }

  /**
   * Generates a standard deck of 52 playing Cards. The deck is
   * generated by iterating over the suits
   * and faces of the Cards and adding them to the deck.
   */
  private void generateDeck() {
    for (char suit : suits) {
      for (int face = 1; face <= 13; face++) {
        cards.add(new PlayingCard(suit, face));
      }
    }
  }

  /**
   * Sets the deck of playing Cards to the specified list of playing Cards.
   * Primarily used for testing purposes to set the state of
   * deck to a specific state for testing different scenarios. (e.g. null cases).
   * @param cards the list of playing Cards to set the deck to
   */
  public void setDeck(List<PlayingCard> cards) {
    this.cards = cards;
  }

  /**
   * Shuffles the deck of playing cards.
   *
   * @throws IllegalStateException if the deck is null or empty.
   */
  public void shuffle() {
    if (cards == null) {
      throw new NullPointerException("Deck is null");
    } else if (cards.isEmpty()) {
      throw new IllegalStateException("Deck is empty");
    } else {
      Collections.shuffle(cards);
    }
  }

  /**
   * Draws a random card from the deck. The card is removed from the deck
   * and returned to the caller.

   * @return a random playing Card from the deck, or null if the deck is empty
   */
  public PlayingCard drawCard() {
    if (cards.isEmpty()) {
      throw new IllegalStateException("Deck is empty");
    }
    return cards.remove(random.nextInt(cards.size()));
  }

  /**
   * Returns the number of playing Cards in the deck.

   * @return the number of playing Cards in the deck
   */
  public int getCardCount() {
    return cards.size();
  }

  /**
   * Returns a copy of the list of playing Cards in the deck.
   * The method is primarily used for testing purposes.
   * @return a copy of the list of playing Cards in the deck
   */
  public List<PlayingCard> getCards() {
    return new ArrayList<>(cards);
  }

  /**
   * Clears the deck of playing Cards.
   * Primarily used for testing purposes. (e.g. testing
   * scenarios where the deck is empty)
   */
  public void clearDeck() {
    cards.clear();
  }

  /**
   * Resets the deck of playing Cards. The deck is cleared and
   * a new standard deck of 52 playing Cards is generated.
   */
  public void resetDeck() {
    clearDeck();
    generateDeck();
  }
}